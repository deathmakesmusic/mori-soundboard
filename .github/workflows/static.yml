name: Update Sounds and Deploy to GitHub Pages

on:
  push:
    branches:
      - main
      
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed so that we can push back changes
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Update sounds.json from sounds directory
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const soundsDir = path.join(process.cwd(), 'sounds');
            const jsonFile = path.join(process.cwd(), 'sounds.json');
            let sounds = [];
            if (fs.existsSync(jsonFile)) {
              try {
                // Read and sanitize sounds.json by removing trailing commas
                const content = fs.readFileSync(jsonFile, 'utf8');
                const cleaned = content.replace(/,\s*(\]|\})/g, '$1');
                sounds = JSON.parse(cleaned);
              } catch (err) {
                console.error('Error parsing sounds.json:', err);
                sounds = [];
              }
            }
            // Build a map of existing entries keyed by file name
            const existing = new Map();
            sounds.forEach(entry => {
              if (entry.file) existing.set(entry.file, entry);
            });
            // List files in the sounds directory
            const files = fs.readdirSync(soundsDir).filter(f => {
              return fs.statSync(path.join(soundsDir, f)).isFile();
            });
            // For each file, if not already in sounds.json, add a new entry.
            // The default name is derived by stripping the extension and replacing dashes with spaces.
            files.forEach(file => {
              if (!existing.has(file)) {
                const name = file.replace(/\.[^/.]+$/, '').replace(/-/g, ' ');
                sounds.push({ name: name, file: file, tags: [] });
              }
            });
            // Write back the merged sounds.json
            fs.writeFileSync(jsonFile, JSON.stringify(sounds, null, 2));
          "
      - name: Commit updated sounds.json if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if [ -n "$(git status --porcelain sounds.json)" ]; then
            git add sounds.json
            git commit -m 'Update sounds.json with new sound files'
            git push
          else
            echo 'No changes to commit.'
          fi
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
